# "First, solve the problem. Then, write the code. -John Johnson"
# "Or use Vangav M"
# www.vangav.com

# MIT License
#
# Copyright (c) 2016 Vangav
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# Community
# Facebook Group: Vangav Open Source - Backend
#   fb.com/groups/575834775932682/
# Facebook Page: Vangav
#   fb.com/vangav.f
#
# Third party communities for Vangav Backend
#   - play framework
#   - cassandra
#   - datastax
#
# Tag your question online (e.g.: stack overflow, etc ...) with
#   #vangav_backend
#   to easier find questions/answers online

# @author mustapha
# fb.com/mustapha.abdallah

{
  "description": "used for all chat-related tables",
  "name": "wa_chat",
  "replications": [
    {
      "description": "used for dev environment",
      "name": "dev",
      "replication": "'class': 'SimpleStrategy', 'replication_factor' : 1"
    }
  ],
  "tables": [
    
    # user_chats
    {
      "description": "used to stores all chat messages per-user",
      "name": "user_chats",
      "columns": [
        {
          "name": "user_id",
          "type": "uuid"
        },
        {
          "name": "message_time",
          "type": "bigint"
        },
        {
          "name": "sender_user_id",
          "type": "uuid"
        },
        {
          "name": "receiver_user_id",
          "type": "uuid"
        },
        {
          "name": "message_id",
          "type": "uuid"
        }
      ],
      "partition_keys": [
        "user_id",
        "message_time",
        "sender_user_id"
      ],
      "secondary_keys": [
      ],
      "caching": "ALL",
      "order_by": [
        {
          "column_name":"message_time",
          "order_type":"DESC"
        }
      ],
      "queries": [
        {
          "description": "inserts a new message for a user",
          "name": "insert",
          "prepared_statement": "INSERT INTO wa_chat.user_chats (user_id, message_time, sender_user_id, receiver_user_id, message_id) VALUES (:user_id, :message_time, :sender_user_id, :receiver_user_id, :message_id);"
        },
        {
          "description": "selects recent messages",
          "name": "select_recent",
          "prepared_statement": "SELECT message_time, sender_user_id, receiver_user_id, message_id FROM wa_chat.user_chats WHERE user_id = :user_id AND message_time > :message_time;"
        },
        {
          "description": "selects all user's messages",
          "name": "select_all",
          "prepared_statement": "SELECT message_time, sender_user_id, receiver_user_id, message_id FROM wa_chat.user_chats WHERE user_id = :user_id;"
        }
      ]
    }
    

  ]
}
